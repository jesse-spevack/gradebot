# Task ID: 3
# Title: Create Assignment Model and Migration
# Status: done
# Dependencies: 2
# Priority: high
# Description: Implement the Assignment model with attributes and associations.
# Details:
Create Assignment model with title (string), description (text), grade_level (string), subject (string), instructions (text), raw_rubric_text (text), and total_processing_milliseconds (integer). Add belongs_to :user association, has_one :rubric association, has_many :student_works association, and has_one :assignment_summary association. Add validations for title, subject, and grade_level presence. Create and run migration. Create fixture and model tests.

# Test Strategy:
Test validations for required fields (title, subject, grade_level). Test associations with user, rubric, student_works, and assignment_summary.

# Subtasks:
## 1. Create Assignment model and migration with attributes [done]
### Dependencies: None
### Description: Create the Assignment model with required attributes and generate the database migration to set up the table structure
### Details:
Implementation steps:
1. Generate the Assignment model and migration:
   ```ruby
   rails generate model Assignment title:string description:text grade_level:string subject:string instructions:text raw_rubric_text:text total_processing_milliseconds:integer user:references
   ```
2. Open the generated migration file in db/migrate/ and verify the table structure includes all required fields
3. Modify the migration if needed to ensure proper column types and constraints
4. Run the migration to create the table:
   ```ruby
   rails db:migrate
   ```
5. Test the migration by checking the schema.rb file to confirm all fields were created correctly

Testing approach:
- Verify schema.rb contains all the specified columns with correct types
- Use Rails console to create a test Assignment instance and confirm all attributes can be set and saved

## 2. Add associations and validations to Assignment model [done]
### Dependencies: 3.1
### Description: Implement the required associations and validations in the Assignment model
### Details:
Implementation steps:
1. Open the Assignment model file (app/models/assignment.rb)
2. Add the following associations:
   ```ruby
   belongs_to :user
   has_one :rubric, dependent: :destroy
   has_many :student_works, dependent: :destroy
   has_one :assignment_summary, dependent: :destroy
   ```
3. Add validations for required fields:
   ```ruby
   validates :title, presence: true
   validates :subject, presence: true
   validates :grade_level, presence: true
   ```
4. Save the model file

Testing approach:
- Create unit tests that verify validations reject records without title, subject, and grade_level
- Test that associations are properly defined by creating related records and checking the relationships work as expected
- Verify that dependent destroy works correctly for all has_one and has_many relationships

## 3. Create test fixtures and model tests for Assignment [done]
### Dependencies: 3.1, 3.2
### Description: Implement test fixtures and comprehensive model tests to ensure Assignment model works correctly
### Details:
Implementation steps:
1. Create a fixture file for assignments in test/fixtures/assignments.yml:
   ```yaml
   valid_assignment:
     title: Sample Assignment
     description: This is a sample assignment
     grade_level: 8
     subject: Science
     instructions: Complete the following experiment...
     raw_rubric_text: Clarity - 10 points, Content - 15 points
     total_processing_milliseconds: 1500
     user: one
   
   missing_title:
     description: Missing title assignment
     grade_level: 7
     subject: Math
     user: one
   ```
2. Create or update the Assignment model test file (test/models/assignment_test.rb):
   ```ruby
   require "test_helper"
   
   class AssignmentTest < ActiveSupport::TestCase
     test "valid assignment" do
       assignment = assignments(:valid_assignment)
       assert assignment.valid?
     end
     
     test "invalid without title" do
       assignment = assignments(:missing_title)
       assert_not assignment.valid?
       assert_includes assignment.errors[:title], "can't be blank"
     end
     
     test "invalid without subject" do
       assignment = assignments(:valid_assignment)
       assignment.subject = nil
       assert_not assignment.valid?
     end
     
     test "invalid without grade_level" do
       assignment = assignments(:valid_assignment)
       assignment.grade_level = nil
       assert_not assignment.valid?
     end
     
     test "has correct associations" do
       assignment = assignments(:valid_assignment)
       assert_respond_to assignment, :user
       assert_respond_to assignment, :rubric
       assert_respond_to assignment, :student_works
       assert_respond_to assignment, :assignment_summary
     end
   end
   ```
3. Run the tests to verify the model works as expected:
   ```
   rails test test/models/assignment_test.rb
   ```

Testing approach:
- Use fixtures to test both valid and invalid assignment scenarios
- Test all validations to ensure they work as expected
- Test all associations to confirm they're properly defined
- Verify error messages are appropriate for validation failures

