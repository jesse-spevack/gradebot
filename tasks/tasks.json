{
  "tasks": [
    {
      "id": 1,
      "title": "Setup Rails Project with Required Dependencies",
      "description": "Initialize a Rails 8+ project with Stimulus, Tailwind 4+, SQLite, and configure Solid gems.",
      "status": "done",
      "dependencies": [],
      "priority": "high",
      "details": "Project has been set up with Rails 8+, Stimulus, Tailwind 4+, SQLite, and Solid gems (cache, queue, cable). Kamal deployment configuration for GCP is complete with 1Password secrets management. Minitest is configured with fixtures. Google API client is set up with 'drive.file' scope.",
      "testStrategy": "Project initialization has been verified. All dependencies are correctly installed and Solid gems are properly configured. Google API connectivity has been tested with mock credentials."
    },
    {
      "id": 2,
      "title": "Create User Model and Migration",
      "description": "Implement the User model with appropriate attributes and associations.",
      "status": "done",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "Create User model with email (string), name (string), provider (string), uid (string), and oauth_token (string). Add necessary validations: email presence and uniqueness, name presence. Add has_many :assignments association. Create and run migration. Create fixture and basic model tests.",
      "testStrategy": "Test validations for email presence, email uniqueness, and name presence. Test association with assignments (verify assignment creation with user association)."
    },
    {
      "id": 3,
      "title": "Create Assignment Model and Migration",
      "description": "Implement the Assignment model with attributes and associations.",
      "status": "done",
      "dependencies": [
        2
      ],
      "priority": "high",
      "details": "Create Assignment model with title (string), description (text), grade_level (string), subject (string), instructions (text), raw_rubric_text (text), and total_processing_milliseconds (integer). Add belongs_to :user association, has_one :rubric association, has_many :student_works association, and has_one :assignment_summary association. Add validations for title, subject, and grade_level presence. Create and run migration. Create fixture and model tests.",
      "testStrategy": "Test validations for required fields (title, subject, grade_level). Test associations with user, rubric, student_works, and assignment_summary.",
      "subtasks": [
        {
          "id": 1,
          "title": "Create Assignment model and migration with attributes",
          "description": "Create the Assignment model with required attributes and generate the database migration to set up the table structure",
          "dependencies": [],
          "details": "Implementation steps:\n1. Generate the Assignment model and migration:\n   ```ruby\n   rails generate model Assignment title:string description:text grade_level:string subject:string instructions:text raw_rubric_text:text total_processing_milliseconds:integer user:references\n   ```\n2. Open the generated migration file in db/migrate/ and verify the table structure includes all required fields\n3. Modify the migration if needed to ensure proper column types and constraints\n4. Run the migration to create the table:\n   ```ruby\n   rails db:migrate\n   ```\n5. Test the migration by checking the schema.rb file to confirm all fields were created correctly\n\nTesting approach:\n- Verify schema.rb contains all the specified columns with correct types\n- Use Rails console to create a test Assignment instance and confirm all attributes can be set and saved",
          "status": "done",
          "parentTaskId": 3
        },
        {
          "id": 2,
          "title": "Add associations and validations to Assignment model",
          "description": "Implement the required associations and validations in the Assignment model",
          "dependencies": [
            1
          ],
          "details": "Implementation steps:\n1. Open the Assignment model file (app/models/assignment.rb)\n2. Add the following associations:\n   ```ruby\n   belongs_to :user\n   has_one :rubric, dependent: :destroy\n   has_many :student_works, dependent: :destroy\n   has_one :assignment_summary, dependent: :destroy\n   ```\n3. Add validations for required fields:\n   ```ruby\n   validates :title, presence: true\n   validates :subject, presence: true\n   validates :grade_level, presence: true\n   ```\n4. Save the model file\n\nTesting approach:\n- Create unit tests that verify validations reject records without title, subject, and grade_level\n- Test that associations are properly defined by creating related records and checking the relationships work as expected\n- Verify that dependent destroy works correctly for all has_one and has_many relationships",
          "status": "done",
          "parentTaskId": 3
        },
        {
          "id": 3,
          "title": "Create test fixtures and model tests for Assignment",
          "description": "Implement test fixtures and comprehensive model tests to ensure Assignment model works correctly",
          "dependencies": [
            1,
            2
          ],
          "details": "Implementation steps:\n1. Create a fixture file for assignments in test/fixtures/assignments.yml:\n   ```yaml\n   valid_assignment:\n     title: Sample Assignment\n     description: This is a sample assignment\n     grade_level: 8\n     subject: Science\n     instructions: Complete the following experiment...\n     raw_rubric_text: Clarity - 10 points, Content - 15 points\n     total_processing_milliseconds: 1500\n     user: one\n   \n   missing_title:\n     description: Missing title assignment\n     grade_level: 7\n     subject: Math\n     user: one\n   ```\n2. Create or update the Assignment model test file (test/models/assignment_test.rb):\n   ```ruby\n   require \"test_helper\"\n   \n   class AssignmentTest < ActiveSupport::TestCase\n     test \"valid assignment\" do\n       assignment = assignments(:valid_assignment)\n       assert assignment.valid?\n     end\n     \n     test \"invalid without title\" do\n       assignment = assignments(:missing_title)\n       assert_not assignment.valid?\n       assert_includes assignment.errors[:title], \"can't be blank\"\n     end\n     \n     test \"invalid without subject\" do\n       assignment = assignments(:valid_assignment)\n       assignment.subject = nil\n       assert_not assignment.valid?\n     end\n     \n     test \"invalid without grade_level\" do\n       assignment = assignments(:valid_assignment)\n       assignment.grade_level = nil\n       assert_not assignment.valid?\n     end\n     \n     test \"has correct associations\" do\n       assignment = assignments(:valid_assignment)\n       assert_respond_to assignment, :user\n       assert_respond_to assignment, :rubric\n       assert_respond_to assignment, :student_works\n       assert_respond_to assignment, :assignment_summary\n     end\n   end\n   ```\n3. Run the tests to verify the model works as expected:\n   ```\n   rails test test/models/assignment_test.rb\n   ```\n\nTesting approach:\n- Use fixtures to test both valid and invalid assignment scenarios\n- Test all validations to ensure they work as expected\n- Test all associations to confirm they're properly defined\n- Verify error messages are appropriate for validation failures",
          "status": "done",
          "parentTaskId": 3
        }
      ]
    },
    {
      "id": 4,
      "title": "Create Rubric Model and Migration",
      "description": "Implement the Rubric model with its attributes and associations.",
      "status": "done",
      "dependencies": [
        3
      ],
      "priority": "high",
      "details": "Create Rubric model with title (string) and description (text). Add belongs_to :assignment association and has_many :criteria association. Add validations for title presence. Create and run migration. Create fixture and model tests.",
      "testStrategy": "Test validation for title presence. Test associations with assignment and criteria.",
      "subtasks": [
        {
          "id": 1,
          "title": "Generate Rubric model and migration",
          "description": "Create the Rubric model with its attributes and run the migration to update the database schema",
          "dependencies": [],
          "details": "1. Generate the Rubric model with its attributes using Rails generator:\n   ```\n   rails generate model Rubric title:string description:text assignment:references\n   ```\n2. Review the generated migration file in db/migrate/\n3. Ensure the migration includes:\n   - A string column for 'title'\n   - A text column for 'description'\n   - A foreign key for 'assignment_id'\n   - Appropriate indexes (particularly on assignment_id)\n4. Run the migration:\n   ```\n   rails db:migrate\n   ```\n5. Verify the schema.rb file to confirm the table was created correctly\n6. Test the migration by rolling back and re-migrating:\n   ```\n   rails db:rollback\n   rails db:migrate\n   ```",
          "status": "done",
          "parentTaskId": 4
        },
        {
          "id": 2,
          "title": "Implement Rubric model associations and validations",
          "description": "Add the necessary associations and validations to the Rubric model",
          "dependencies": [
            1
          ],
          "details": "1. Open the app/models/rubric.rb file\n2. Implement the belongs_to association:\n   ```ruby\n   belongs_to :assignment\n   ```\n3. Implement the has_many association:\n   ```ruby\n   has_many :criteria, dependent: :destroy\n   ```\n4. Add validations for title presence:\n   ```ruby\n   validates :title, presence: true\n   ```\n5. Make sure the Assignment model has the corresponding has_many or has_one association:\n   ```ruby\n   # In app/models/assignment.rb\n   has_one :rubric, dependent: :destroy\n   # or has_many :rubrics, dependent: :destroy (depending on your requirements)\n   ```\n6. Test the associations in the Rails console:\n   ```\n   rails console\n   rubric = Rubric.new\n   rubric.respond_to?(:assignment) # Should return true\n   rubric.respond_to?(:criteria) # Should return true\n   ```",
          "status": "done",
          "parentTaskId": 4
        },
        {
          "id": 3,
          "title": "Create fixtures and model tests for Rubric",
          "description": "Implement test fixtures and model tests to ensure the Rubric model works correctly",
          "dependencies": [
            1,
            2
          ],
          "details": "1. Create a fixture file for Rubrics in test/fixtures/rubrics.yml:\n   ```yaml\n   valid_rubric:\n     title: Sample Rubric\n     description: A sample rubric for testing\n     assignment: assignment_one # Reference to an assignment fixture\n   \n   rubric_without_title:\n     description: A rubric without a title\n     assignment: assignment_two # Reference to another assignment fixture\n   ```\n2. Ensure you have assignment fixtures in test/fixtures/assignments.yml\n3. Create model tests in test/models/rubric_test.rb:\n   ```ruby\n   require 'test_helper'\n   \n   class RubricTest < ActiveSupport::TestCase\n     test \"should be valid with all attributes\" do\n       rubric = rubrics(:valid_rubric)\n       assert rubric.valid?\n     end\n   \n     test \"should be invalid without title\" do\n       rubric = rubrics(:rubric_without_title)\n       assert_not rubric.valid?\n       assert_includes rubric.errors[:title], \"can't be blank\"\n     end\n   \n     test \"should belong to an assignment\" do\n       rubric = rubrics(:valid_rubric)\n       assert_respond_to rubric, :assignment\n       assert_instance_of Assignment, rubric.assignment\n     end\n   \n     test \"should have many criteria\" do\n       rubric = rubrics(:valid_rubric)\n       assert_respond_to rubric, :criteria\n     end\n   end\n   ```\n4. Run the tests to ensure everything is working correctly:\n   ```\n   rails test test/models/rubric_test.rb\n   ```\n5. Debug and fix any failing tests",
          "status": "done",
          "parentTaskId": 4
        }
      ]
    },
    {
      "id": 5,
      "title": "Create Criterion Model and Migration",
      "description": "Implement the Criterion model with attributes and associations.",
      "status": "done",
      "dependencies": [
        4
      ],
      "priority": "high",
      "details": "Create Criterion model with title (string), description (text), and position (integer). Add belongs_to :rubric association and has_many :levels association. Add validations for title presence. Create and run migration. Create fixture and model tests.",
      "testStrategy": "Test validation for title presence. Test associations with rubric and levels. Test position attribute for proper ordering.",
      "subtasks": [
        {
          "id": 1,
          "title": "Generate Criterion model and migration file",
          "description": "Create the Criterion model file and generate the migration file with the required attributes",
          "dependencies": [],
          "details": "1. Use Rails generator to create the Criterion model and migration:\n   ```\n   rails generate model Criterion title:string description:text position:integer rubric:references\n   ```\n2. This will create:\n   - app/models/criterion.rb\n   - db/migrate/YYYYMMDDHHMMSS_create_criteria.rb\n3. Verify the migration file includes the correct fields (title, description, position, and rubric reference)\n4. Ensure the table name is 'criteria' (Rails should pluralize this correctly)\n5. Test by inspecting the generated files to confirm they contain the expected fields",
          "status": "done",
          "parentTaskId": 5
        },
        {
          "id": 2,
          "title": "Update Criterion model with associations and validations",
          "description": "Add the required associations, validations, and any other model configurations",
          "dependencies": [
            1
          ],
          "details": "1. Open app/models/criterion.rb\n2. Add the belongs_to association:\n   ```ruby\n   belongs_to :rubric\n   ```\n3. Add the has_many association:\n   ```ruby\n   has_many :levels, dependent: :destroy\n   ```\n4. Add validation for title presence:\n   ```ruby\n   validates :title, presence: true\n   ```\n5. Ensure any other necessary model configurations are added\n6. Update the Rubric model (if it exists) to include:\n   ```ruby\n   has_many :criteria, dependent: :destroy\n   ```\n7. Test by checking syntax and ensuring the model file contains all required elements",
          "status": "done",
          "parentTaskId": 5
        },
        {
          "id": 3,
          "title": "Run migration and create tests",
          "description": "Execute the migration and create fixture and model tests for the Criterion model",
          "dependencies": [
            1,
            2
          ],
          "details": "1. Run the migration:\n   ```\n   rails db:migrate\n   ```\n2. Create fixture for Criterion in test/fixtures/criteria.yml:\n   ```yaml\n   criterion_one:\n     title: First Criterion\n     description: This is a test criterion\n     position: 1\n     rubric: one # assuming you have a rubric fixture\n\n   criterion_two:\n     title: Second Criterion\n     description: Another test criterion\n     position: 2\n     rubric: one\n   ```\n3. Create model tests in test/models/criterion_test.rb:\n   ```ruby\n   require \"test_helper\"\n\n   class CriterionTest < ActiveSupport::TestCase\n     test \"should not save criterion without title\" do\n       criterion = Criterion.new(description: \"Test\", position: 1)\n       assert_not criterion.save\n     end\n\n     test \"should save valid criterion\" do\n       criterion = Criterion.new(title: \"Test\", description: \"Test\", position: 1, rubric: rubrics(:one))\n       assert criterion.save\n     end\n\n     test \"should have association with rubric\" do\n       criterion = criteria(:criterion_one)\n       assert_not_nil criterion.rubric\n     end\n   end\n   ```\n4. Run the tests to verify:\n   ```\n   rails test test/models/criterion_test.rb\n   ```\n5. Verify the schema.rb file has been updated with the new table",
          "status": "done",
          "parentTaskId": 5
        }
      ]
    },
    {
      "id": 6,
      "title": "Create Level Model and Migration",
      "description": "Implement the Level model with attributes and associations.",
      "status": "done",
      "dependencies": [
        5
      ],
      "priority": "high",
      "details": "Create Level model with title (string), description (text), and position (integer). Add belongs_to :criterion association. Add validations for title presence. Create and run migration. Create fixture and model tests.",
      "testStrategy": "Test validations for title presence. Test association with criterion. Test position attribute for proper ordering."
    },
    {
      "id": 7,
      "title": "Create StudentWork Model and Migration",
      "description": "Implement the StudentWork model with attributes and associations.",
      "status": "done",
      "dependencies": [
        3
      ],
      "priority": "high",
      "details": "Create StudentWork model with qualitative_feedback (text), and status (enum: pending, processing, completed, failed). Add belongs_to :assignment association, has_many :feedback_items association, and has_many :student_work_checks association. Create and run migration. Create fixture and model tests.",
      "testStrategy": "Test associations with assignment, feedback_items, and student_work_checks. Test status enum functionality."
    },
    {
      "id": 8,
      "title": "Create StudentWorkCriterionLevel Model and Migration",
      "description": "Implement the join model between StudentWork, Criterion, and Level.",
      "status": "done",
      "dependencies": [
        6,
        7
      ],
      "priority": "high",
      "details": "Create StudentWorkCriterionLevel model with explanation (text). Add belongs_to associations for student_work, criterion, and level. Add validations to ensure uniqueness of criterion per student_work. Create and run migration. Create fixture and model tests.",
      "testStrategy": "Test associations with student_work, criterion, and level. Test uniqueness validation for criterion per student_work."
    },
    {
      "id": 9,
      "title": "Create FeedbackItem Model and Migration",
      "description": "Implement the FeedbackItem model with attributes and associations.",
      "status": "done",
      "dependencies": [
        7
      ],
      "priority": "high",
      "details": "Create FeedbackItem model with kind (enum: strength, opportunity), title (string), description (text), and evidence (text). Add polymorphic belongs_to :feedbackable association. Add validations for title, description, kind, and feedbackable presence. Create and run migration. Create fixture and model tests.",
      "testStrategy": "Test validations for required fields. Test polymorphic association. Test enum functionality for kind."
    },
    {
      "id": 10,
      "title": "Create StudentWorkCheck Model and Migration",
      "description": "Implement the StudentWorkCheck model with attributes and associations.",
      "status": "done",
      "dependencies": [
        7
      ],
      "priority": "high",
      "details": "Create StudentWorkCheck model with check_type (enum: llm_generated, writing_grade_level, plagiarism), score (integer, 0-100), and explanation (text). Add belongs_to :student_work association. Add validations for check_type, score (including conditional 1-12 range for writing_grade_level), and student_work presence. Create and run migration. Create fixture and model tests.",
      "testStrategy": "Test validations for required fields and score ranges (including conditional). Test association with student_work. Test check_type enum."
    },
    {
      "id": 11,
      "title": "Create AssignmentSummary Model and Migration",
      "description": "Implement the AssignmentSummary model with attributes and associations.",
      "status": "done",
      "dependencies": [
        3,
        9
      ],
      "priority": "high",
      "details": "Create AssignmentSummary model with student_work_count (integer, default 0, required) and qualitative_insights (text, required). Add belongs_to :assignment association and polymorphic has_many :feedback_items association. Create and run migration. Create fixture and model tests.",
      "testStrategy": "Test association with assignment. Test creation and retrieval of associated feedback items (polymorphic). Test presence validations."
    },
    {
      "id": 12,
      "title": "Create SelectedDocument Model and Migration",
      "description": "Implement the SelectedDocument model for Google Doc selection.",
      "status": "done",
      "dependencies": [
        3
      ],
      "priority": "high",
      "details": "Create SelectedDocument model with google_doc_id (string, required), title (string, required), and url (string, required). Add belongs_to :assignment association. Add validations for google_doc_id (presence, uniqueness) and assignment, title, url (presence). Create and run migration. Create fixture and model tests.",
      "testStrategy": "Test validations for required fields and google_doc_id uniqueness. Test association with assignment."
    },
    {
      "id": 13,
      "title": "Implement Authentication System with Google OAuth",
      "description": "Implement user authentication using Google OAuth for Google Drive access.",
      "status": "done",
      "dependencies": [
        2
      ],
      "priority": "high",
      "details": "OmniAuth with Google OAuth2 provider has been integrated with 'drive.file' scope. Authentication flow, sessions controller, and user creation/lookup are implemented. Login/logout functionality and protected routes are working. Google OAuth tokens are securely stored with refresh mechanism for expired tokens.",
      "testStrategy": "Authentication flow has been tested with mock OAuth responses. Token storage and refresh mechanisms are verified. Access restrictions on protected routes are confirmed. User creation and lookup functionality is tested with fixtures."
    },
    {
      "id": 14,
      "title": "Implement Assignment Controller",
      "description": "Create the controller for handling assignment creation and display.",
      "status": "done",
      "dependencies": [
        13
      ],
      "priority": "high",
      "details": "Create AssignmentsController with new, create, show, and index actions. Implement new action to display form. Implement create action to process form submission and create Assignment record. Add strong parameters for assignment attributes. Add before_action to ensure authentication. Implement redirect to assignment show page after creation.",
      "testStrategy": "Test controller actions with valid and invalid parameters. Test authentication requirement. Test redirect after creation."
    },
    {
      "id": 15,
      "title": "Create Assignment Form View",
      "description": "Build the form for creating new assignments with enhanced UX, Google Picker integration, and improved grading settings.",
      "status": "done",
      "dependencies": [
        14
      ],
      "priority": "high",
      "details": "Implement a new assignment form at /assignments/new with the following features:\n- Flat fields: title, description, subject, grade level (select dropdown), and instructions.\n- Use Tailwind-based cards for each section (assignment details, rubric, student work, grading settings).\n- Add a toggle switch for rubric selection: 'Generate with AI' (default) or 'I have a rubric'. Only show the rubric textarea if 'I have a rubric' is selected. Placeholder: \"Paste your rubric here, don't worry about formatting.\"\n- Integrate Google Picker for selecting up to 35 student documents. Display selected documents in a dedicated section. Submit document data as a hidden field.\n- Implement a feedback tone slider bar with three options: Encouraging, Objective/Neutral, Critical.\n- All icons should be rendered as Rails partials from the /icons directory.\n- Use Stimulus controllers for rubric toggle, document picker, and feedback tone slider interactivity.\n- Display validation errors tastefully at the top of the form.\n- No nested attributes or form object required at this stage; use the Assignment model and handle document data in the controller.\n- Submit the form via POST.\n",
      "testStrategy": "Test form rendering with all required fields and cards. Test rubric toggle switch and conditional textarea display. Test Google Picker integration and document display. Test feedback tone slider bar. Test form submission with both rubric options and with/without selected documents. Test validation error display."
    },
    {
      "id": 16,
      "title": "Create SelectedDocument::BulkCreationService",
      "description": "Implement service for creating multiple selected documents in one transaction.",
      "status": "done",
      "dependencies": [
        12,
        14
      ],
      "priority": "high",
      "details": "Create SelectedDocument::BulkCreationService that takes an array of Google document IDs and an assignment. Service should fetch document metadata, validate document size (<2000 words), and create SelectedDocument records in a single database transaction. Implement word count calculation for validation.",
      "testStrategy": "Test bulk creation with valid and invalid documents. Test word count validation. Test transaction rollback on error."
    },
    {
      "id": 17,
      "title": "Create StudentWork::BulkCreationService",
      "description": "Implement service for creating multiple student work records in one transaction.",
      "status": "done",
      "dependencies": [
        7,
        16
      ],
      "priority": "high",
      "details": "Create StudentWork::BulkCreationService that takes an array of SelectedDocument records and an assignment. Service should create StudentWork records in a single database transaction with initial 'pending' status. Implement associations between StudentWork and SelectedDocument.",
      "testStrategy": "Test bulk creation with valid inputs. Test proper association with SelectedDocument. Test transaction rollback on error."
    },
    {
      "id": 18,
      "title": "Create Assignment::InitializerService",
      "description": "Implement service for handling the complete assignment creation process.",
      "status": "in-progress",
      "dependencies": [
        16,
        17
      ],
      "priority": "high",
      "details": "Create Assignment::InitializerService that orchestrates the complete assignment creation process. Service should handle assignment creation, call SelectedDocument::BulkCreationService and StudentWork::BulkCreationService, and enqueue AssignmentProcessingJob. Implement error handling and rollback for failed operations.",
      "testStrategy": "Test the complete flow with valid and invalid inputs. Test error handling and rollback. Test job enqueuing."
    },
    {
      "id": 19,
      "title": "Create LLM BaseClient Implementation",
      "description": "Implement the base client for LLM requests with cost tracking.",
      "status": "done",
      "dependencies": [
        1
      ],
      "priority": "high",
      "details": "Create BaseClient class for LLM requests that handles authentication, request formatting, and response parsing. Implement methods for sending prompts to LLMs. Add token counting for prompt and completion. Implement event publication for request completion. Add timing mechanisms for performance tracking.",
      "testStrategy": "Test client initialization with valid and invalid credentials. Test request formatting and response parsing. Test token counting accuracy. Test event publication for completed requests."
    },
    {
      "id": 20,
      "title": "Add Gemini Flash 2.5 Support to LLM Client",
      "description": "Extend the LLM client to support the Gemini Flash 2.5 model.",
      "status": "pending",
      "dependencies": [
        19
      ],
      "priority": "high",
      "details": "Create GeminiClient class that inherits from BaseClient. Implement Gemini-specific request formatting, API endpoint configuration, and authentication. Add response parsing for Gemini-specific response format. Implement token counting for Gemini model. Add configuration options for model parameters (temperature, top_p, etc.).",
      "testStrategy": "Test Gemini API integration with mock responses. Test token counting for Gemini-specific tokenization. Test parameter configuration. Test end-to-end request and response flow."
    },
    {
      "id": 21,
      "title": "Review and Finalize Cost Tracking System",
      "description": "Double-check the existing cost tracking implementation for completeness and accuracy.",
      "status": "pending",
      "dependencies": [
        19,
        20
      ],
      "priority": "medium",
      "details": "Review existing CostTrackingSubscriber implementation. Verify token counting logic for all supported models. Check cost calculation formulas for accuracy. Test event handling for request_completed events. Verify fallback mechanism for direct cost tracking. Ensure proper data persistence for cost records. Update documentation for cost tracking system.",
      "testStrategy": "Test cost calculation with sample responses from different models. Verify event handling with mock events. Test fallback mechanism by simulating event system failures. Validate data persistence and reporting functionality."
    },
    {
      "id": 22,
      "title": "Create ProcessingTask Abstraction",
      "description": "Implement the ProcessingTask abstraction for LLM processing tasks.",
      "status": "pending",
      "dependencies": [
        19,
        20
      ],
      "priority": "high",
      "details": "Create ProcessingTask class to encapsulate LLM processing configuration and context. Implement methods for storing task-specific data, prompt template selection, response parser selection, storage service selection, and broadcaster selection. Add methods for tracking processing time and user attribution.",
      "testStrategy": "Test task initialization with various configurations. Test method selection logic for different task types. Test processing time tracking."
    },
    {
      "id": 23,
      "title": "Create ProcessingFailure Model",
      "description": "Implement model to store details about processing failures.",
      "status": "pending",
      "dependencies": [
        22
      ],
      "priority": "high",
      "details": "Create ProcessingFailure model with polymorphic association `failable`, `reason` (text), and other attributes as needed. Add tests and fixtures. Models like StudentWork, AssignmentSummary etc. will `has_many :processing_failures, as: :failable`.",
      "testStrategy": "Test polymorphic association, validations, data storage."
    },
    {
      "id": 24,
      "title": "Create ProcessingPipeline Abstraction",
      "description": "Implement the ProcessingPipeline abstraction for orchestrating LLM workflows.",
      "status": "pending",
      "dependencies": [
        22,
        23
      ],
      "priority": "high",
      "details": "Create ProcessingPipeline class to orchestrate LLM processing workflow. Implement methods for building prompts, making LLM requests, tracking processing time, parsing responses, storing results, managing status (including recording failures using ProcessingFailure model), and broadcasting updates. Add error handling, retry mechanisms, and timeout configuration.",
      "testStrategy": "Test pipeline execution with mock ProcessingTask. Test each step of the workflow independently. Test error handling, failure recording, and retry mechanisms with simulated failures."
    },
    {
      "id": 25,
      "title": "Create RubricPromptBuilder",
      "description": "Implement the prompt builder for rubric generation.",
      "status": "pending",
      "dependencies": [
        22,
        24
      ],
      "priority": "medium",
      "details": "Create RubricPromptBuilder class that inherits from BasePromptBuilder. Implement build_prompt method that formats assignment details and raw rubric text (if provided) into a structured prompt for rubric generation. Add template selection logic based on presence of raw rubric text. Implement JSON output formatting instructions.",
      "testStrategy": "Test prompt building with and without raw rubric text. Test JSON formatting instructions. Test prompt length calculation."
    },
    {
      "id": 26,
      "title": "Create RubricResponseParser",
      "description": "Implement the response parser for rubric generation.",
      "status": "pending",
      "dependencies": [
        25
      ],
      "priority": "medium",
      "details": "Create RubricResponseParser class that inherits from BaseResponseParser. Implement parse_response method that extracts rubric criteria and levels from JSON response. Add validation for required fields. Implement error handling for malformed responses. Format data for database storage.",
      "testStrategy": "Test parsing with valid and invalid JSON responses. Test validation of required fields. Test error handling for malformed responses."
    },
    {
      "id": 27,
      "title": "Create Rubric::CreationService",
      "description": "Implement service for creating rubric structure from parsed response.",
      "status": "pending",
      "dependencies": [
        26
      ],
      "priority": "medium",
      "details": "Create Rubric::CreationService that takes parsed rubric data and an assignment. Service should create Rubric record with associated Criterion and Level records in a transaction. Implement proper position ordering for criteria and levels. Add validation for required data. Implement error handling and rollback.",
      "testStrategy": "Test creation with valid and invalid inputs. Test proper position ordering. Test transaction rollback on error."
    },
    {
      "id": 28,
      "title": "Implement Content Validation in Pipeline",
      "description": "Add step to StudentWork processing pipeline to validate content length.",
      "status": "pending",
      "dependencies": [
        24,
        7
      ],
      "priority": "medium",
      "details": "Modify the StudentWork feedback processing pipeline (Task 24) to fetch document content via API and validate its length (e.g., word count or token count < limit). If validation fails, update StudentWork status to 'failed' and create a ProcessingFailure record.",
      "testStrategy": "Test pipeline modification with documents exceeding the limit, ensure status update and failure recording."
    },
    {
      "id": 29,
      "title": "Create StudentWorkPromptBuilder",
      "description": "Implement the prompt builder for student work feedback.",
      "status": "pending",
      "dependencies": [
        22,
        24,
        28
      ],
      "priority": "medium",
      "details": "Create StudentWorkPromptBuilder class that inherits from BasePromptBuilder. Implement build_prompt method that combines student work content, assignment details, and rubric structure into a prompt for feedback generation. Add feedback tone customization based on assignment settings. Implement JSON output formatting instructions.",
      "testStrategy": "Test prompt building with different feedback tones. Test handling of long student work content. Test JSON formatting instructions."
    },
    {
      "id": 30,
      "title": "Create StudentWorkResponseParser",
      "description": "Implement the response parser for student work feedback.",
      "status": "pending",
      "dependencies": [
        29
      ],
      "priority": "medium",
      "details": "Create StudentWorkResponseParser class that inherits from BaseResponseParser. Implement parse_response method that extracts qualitative feedback, feedback items, rubric criterion levels, and checks from JSON response. Add validation for required fields. Implement error handling for malformed responses. Format data for database storage.",
      "testStrategy": "Test parsing with valid and invalid JSON responses. Test validation of required fields. Test error handling for malformed responses."
    },
    {
      "id": 31,
      "title": "Create StudentWork::UpdateService",
      "description": "Implement service for updating student work with feedback data.",
      "status": "pending",
      "dependencies": [
        30
      ],
      "priority": "medium",
      "details": "Create StudentWork::UpdateService that takes parsed student work feedback data and a student work record. Service should update student work qualitative feedback and create associated FeedbackItem, StudentWorkCriterionLevel, and StudentWorkCheck records in a transaction. Implement proper type assignment for feedback items. Add validation for required data. Implement error handling and rollback.",
      "testStrategy": "Test update with valid and invalid inputs. Test creation of associated records. Test transaction rollback on error."
    },
    {
      "id": 32,
      "title": "Create SummaryPromptBuilder",
      "description": "Implement the prompt builder for assignment summary generation.",
      "status": "pending",
      "dependencies": [
        22,
        24
      ],
      "priority": "medium",
      "details": "Create SummaryPromptBuilder class that inherits from BasePromptBuilder. Implement build_prompt method that combines assignment details, rubric structure, and aggregated student work feedback into a prompt for summary generation. Add aggregation logic for common strengths and weaknesses. Implement JSON output formatting instructions.",
      "testStrategy": "Test prompt building with various input combinations. Test aggregation logic for feedback. Test JSON formatting instructions."
    },
    {
      "id": 33,
      "title": "Create SummaryResponseParser",
      "description": "Implement the response parser for assignment summary.",
      "status": "pending",
      "dependencies": [
        32
      ],
      "priority": "medium",
      "details": "Create SummaryResponseParser class that inherits from BaseResponseParser. Implement parse_response method that extracts qualitative insights and feedback items from JSON response. Add validation for required fields. Implement error handling for malformed responses. Format data for database storage.",
      "testStrategy": "Test parsing with valid and invalid JSON responses. Test validation of required fields. Test error handling for malformed responses."
    },
    {
      "id": 34,
      "title": "Create AssignmentSummary::CreationService",
      "description": "Implement service for creating assignment summary from parsed response.",
      "status": "pending",
      "dependencies": [
        33
      ],
      "priority": "medium",
      "details": "Create AssignmentSummary::CreationService that takes parsed summary data and an assignment. Service should create AssignmentSummary record with associated FeedbackItem records in a transaction. Add calculation of student_work_count. Implement error handling and rollback.",
      "testStrategy": "Test creation with valid and invalid inputs. Test student_work_count calculation. Test transaction rollback on error."
    },
    {
      "id": 35,
      "title": "Create BroadcastService",
      "description": "Implement service for broadcasting real-time updates to the UI.",
      "status": "pending",
      "dependencies": [
        1
      ],
      "priority": "medium",
      "details": "Create BroadcastService class for sending real-time updates via Action Cable. Implement methods for broadcasting rubric updates, student work status changes, and assignment completion. Add channel configurations for assignment-specific updates. Implement serialization of broadcast data.",
      "testStrategy": "Test broadcasting with mock channel. Test serialization of different data types. Test channel configuration for assignment-specific updates."
    },
    {
      "id": 36,
      "title": "Create TimerService",
      "description": "Implement service for calculating and updating processing time estimates.",
      "status": "pending",
      "dependencies": [
        35
      ],
      "priority": "medium",
      "details": "Create TimerService class for calculating estimated completion times. Implement methods for initial time calculation based on task counts. Add dynamic adjustment based on completed tasks. Implement real-time updates via BroadcastService. Add persistence of actual processing times.",
      "testStrategy": "Test time calculation with various task counts. Test dynamic adjustment with progress updates. Test integration with BroadcastService."
    },
    {
      "id": 37,
      "title": "Create AssignmentProcessingJob",
      "description": "Implement background job for managing the assignment processing workflow.",
      "status": "pending",
      "dependencies": [
        24,
        35,
        36
      ],
      "priority": "medium",
      "details": "Create AssignmentProcessingJob that inherits from ApplicationJob. Implement perform method that initializes and executes the parent ProcessingPipeline. Add creation and coordination of child pipelines for rubric generation, student work feedback, and assignment summary. Implement progress tracking and status updates. Add error handling and retry configuration.",
      "testStrategy": "Test job execution with mock pipelines. Test coordination of child pipelines. Test progress tracking and status updates. Test error handling and retry functionality."
    },
    {
      "id": 38,
      "title": "Create Assignment Show Page View",
      "description": "Build the view for displaying assignment details and processing status.",
      "status": "pending",
      "dependencies": [
        14,
        35
      ],
      "priority": "medium",
      "details": "Create assignment show page with sections for assignment details, rubric, student works, and insights. Implement status badge for assignment processing. Add loading indicators for in-progress sections. Create collapsible sections for rubric criteria and levels. Build student work list with status badges and completion links. Add assignment summary section for displaying insights after processing completes.",
      "testStrategy": "Test page rendering with different assignment states. Test responsive design on different screen sizes."
    },
    {
      "id": 39,
      "title": "Create RubricComponent",
      "description": "Build the Stimulus controller and partial for displaying the rubric.",
      "status": "pending",
      "dependencies": [
        38
      ],
      "priority": "medium",
      "details": "Create RubricComponent with Stimulus controller for handling user interactions. Implement collapsible sections for criteria and levels. Add loading state for rubric generation. Create partial for rendering criteria and levels. Implement real-time updates via Action Cable subscription. Add animations for state transitions.",
      "testStrategy": "Test component rendering with different rubric states. Test collapsible functionality. Test real-time updates with simulated broadcasts."
    },
    {
      "id": 40,
      "title": "Create StudentWorkListComponent",
      "description": "Build the Stimulus controller and partial for displaying the student work list.",
      "status": "pending",
      "dependencies": [
        38
      ],
      "priority": "medium",
      "details": "Create StudentWorkListComponent with Stimulus controller for handling user interactions. Implement list rendering with status badges and completion links. Add progress indicators for processing status. Create partial for rendering student work items. Implement real-time updates via Action Cable subscription. Add sorting and filtering options.",
      "testStrategy": "Test component rendering with different student work states. Test progress indicators. Test real-time updates with simulated broadcasts."
    },
    {
      "id": 41,
      "title": "Create ProcessingStatusComponent",
      "description": "Build the Stimulus controller and partial for displaying processing status.",
      "status": "pending",
      "dependencies": [
        38
      ],
      "priority": "medium",
      "details": "Create ProcessingStatusComponent with Stimulus controller for handling status updates. Implement progress bar for overall completion. Add time estimate display. Create partial for rendering status information. Implement real-time updates via Action Cable subscription. Add animations for state transitions.",
      "testStrategy": "Test component rendering with different processing states. Test progress bar functionality. Test time estimate display. Test real-time updates with simulated broadcasts."
    },
    {
      "id": 42,
      "title": "Create InsightsComponent",
      "description": "Build the Stimulus controller and partial for displaying assignment insights.",
      "status": "pending",
      "dependencies": [
        38
      ],
      "priority": "medium",
      "details": "Create InsightsComponent with Stimulus controller for handling user interactions. Implement collapsible sections for different insight categories. Add visualization for common strengths and weaknesses. Create partial for rendering insight data. Implement conditional display based on assignment completion status.",
      "testStrategy": "Test component rendering with different insight data. Test collapsible functionality. Test conditional display based on assignment status."
    },
    {
      "id": 43,
      "title": "Create Student Work Show Page View",
      "description": "Build the view for displaying and editing student work feedback.",
      "status": "pending",
      "dependencies": [
        40
      ],
      "priority": "low",
      "details": "Create student work show page with sections for feedback note, feedback items, rubric criteria levels, and checks. Implement edit/save functionality for each section. Add buttons for sending feedback to Google Docs. Create form elements for editing feedback content. Implement responsive design for mobile use.",
      "testStrategy": "Test page rendering with different student work states. Test edit/save functionality. Test responsive design on different screen sizes."
    },
    {
      "id": 44,
      "title": "Create FeedbackEditorComponent",
      "description": "Build the Stimulus controller for editing feedback content.",
      "status": "pending",
      "dependencies": [
        43
      ],
      "priority": "low",
      "details": "Create FeedbackEditorComponent with Stimulus controller for handling edit/save functionality. Implement toggle between view and edit modes. Add form submission handling. Create partial for rendering feedback editor. Implement validation for edited content. Add success/error messaging for save operations.",
      "testStrategy": "Test component functionality for toggling between view and edit modes. Test form submission. Test validation for edited content. Test success/error messaging."
    },
    {
      "id": 45,
      "title": "Create GoogleDocsService",
      "description": "Implement service for appending feedback to Google documents.",
      "status": "pending",
      "dependencies": [
        43,
        44
      ],
      "priority": "low",
      "details": "Create GoogleDocsService class for interacting with Google Docs API. Implement methods for appending content to documents. Add formatting service for converting feedback to Google Docs format. Implement authentication and authorization handling. Add error handling and retry mechanisms.",
      "testStrategy": "Test API integration with mock Google Docs API. Test formatting service for different feedback types. Test error handling and retry mechanisms."
    },
    {
      "id": 46,
      "title": "Create FeedbackSender",
      "description": "Implement controller and service for sending feedback to Google Docs.",
      "status": "pending",
      "dependencies": [
        45
      ],
      "priority": "low",
      "details": "Create FeedbackSender controller with action for sending feedback to Google Docs. Implement service for formatting and combining feedback elements. Add configuration for feedback inclusion options. Create success/error response handling. Implement progress indicator for sending operation.",
      "testStrategy": "Test controller action with valid and invalid parameters. Test service for formatting different feedback combinations. Test success/error response handling."
    },
    {
      "id": 47,
      "title": "Create Assignments Index Page View",
      "description": "Build the view for displaying all assignments with analytics.",
      "status": "pending",
      "dependencies": [
        14
      ],
      "priority": "low",
      "details": "Create assignments index page with list of all assignments. Add filter and sort options. Implement analytics section with streak tracking and assignment counts. Create GitHub-style contribution graph showing daily grading activity. Add pagination for large assignment lists. Implement responsive design for mobile use.",
      "testStrategy": "Test page rendering with different assignment counts. Test filter and sort functionality. Test analytics calculations. Test responsive design on different screen sizes."
    },
    {
      "id": 48,
      "title": "Create StreakTracker",
      "description": "Implement service for tracking consecutive days with grading tasks.",
      "status": "pending",
      "dependencies": [
        47
      ],
      "priority": "low",
      "details": "Create StreakTracker service for calculating consecutive days with grading activity. Implement methods for streak calculation based on completed student works. Add persistence for streak data. Create visualization component for displaying streak information. Implement real-time updates for streak changes.",
      "testStrategy": "Test streak calculation with various activity patterns. Test persistence of streak data. Test visualization component with different streak values."
    },
    {
      "id": 49,
      "title": "Create ContributionGraph",
      "description": "Build the component for displaying GitHub-style contribution graph.",
      "status": "pending",
      "dependencies": [
        47,
        48
      ],
      "priority": "low",
      "details": "Create ContributionGraph component for visualizing daily grading activity. Implement grid layout with one square per day. Add color intensity scaling based on activity level. Create tooltip for displaying detailed information on hover. Implement month and day labels. Add responsive design for different screen sizes.",
      "testStrategy": "Test component rendering with different activity patterns. Test color intensity scaling. Test tooltip functionality. Test responsive design on different screen sizes."
    },
    {
      "id": 50,
      "title": "Setup Stripe Integration",
      "description": "Implement Stripe API integration for subscription management.",
      "status": "pending",
      "dependencies": [
        1
      ],
      "priority": "low",
      "details": "Initialize Stripe API client with test credentials. Create configuration for subscription plans (free: 1 assignment/month, paid: 300 assignments/month). Implement webhook endpoint for subscription events. Add secure handling of Stripe API keys. Create test mode toggle for development and testing.",
      "testStrategy": "Test API integration with Stripe test mode. Test webhook handling with simulated events. Test secure key handling."
    },
    {
      "id": 51,
      "title": "Create SubscriptionsController",
      "description": "Build controller for handling subscription management.",
      "status": "pending",
      "dependencies": [
        50
      ],
      "priority": "low",
      "details": "Create SubscriptionsController with actions for plan selection, checkout, success, and cancel. Implement integration with Stripe Checkout for payment processing. Add session handling for checkout flow. Create success and cancel pages. Implement error handling for failed checkout attempts.",
      "testStrategy": "Test controller actions with valid and invalid parameters. Test integration with Stripe Checkout. Test success and cancel flows. Test error handling for failed checkout attempts."
    },
    {
      "id": 52,
      "title": "Create Subscription Model and Migration",
      "description": "Implement the Subscription model for tracking user subscriptions.",
      "status": "pending",
      "dependencies": [
        50
      ],
      "priority": "low",
      "details": "Create Subscription model with plan_type (enum: free, paid), status (enum: active, canceled, expired), start_date (datetime), end_date (datetime), and stripe_subscription_id (string). Add belongs_to :user association. Implement methods for checking assignment limits. Create and run migration. Add model tests.",
      "testStrategy": "Test model creation and validation. Test association with user. Test methods for checking assignment limits."
    },
    {
      "id": 53,
      "title": "Create SubscriptionLimitEnforcer",
      "description": "Implement service for enforcing subscription assignment limits.",
      "status": "pending",
      "dependencies": [
        52
      ],
      "priority": "low",
      "details": "Create SubscriptionLimitEnforcer service for checking and enforcing assignment limits. Implement methods for counting assignments within the current month. Add integration with assignments controller to prevent creation when limit is reached. Create upgrade prompts for free tier users who reach their limit.",
      "testStrategy": "Test limit enforcement with different subscription types. Test assignment counting within current month. Test integration with assignments controller."
    },
    {
      "id": 54,
      "title": "Create Privacy, Terms, and AI Pages",
      "description": "Build static pages describing data usage policies.",
      "status": "pending",
      "dependencies": [
        1
      ],
      "priority": "low",
      "details": "Create privacy policy page describing data collection and usage. Build terms of service page outlining user agreements. Add AI page explaining LLM usage and data handling. Implement responsive design for all pages. Add links to these pages in the application footer.",
      "testStrategy": "Test page rendering and content. Test responsive design on different screen sizes. Test navigation links to these pages."
    }
  ],
  "metadata": {
    "projectName": "GradeBot Implementation",
    "totalTasks": 54,
    "sourceFile": "gradebot-prd.md",
    "generatedAt": "2025-04-19"
  }
}