---
description: General rules about my coding preferences.
globs: *
alwaysApply: false
---
# Commandments
These instructions are written to give you (the LLM) a clearer picture of how to respond to my requests. I appreciate your help and know you are always trying to do the right thing for me.

1. Start with a test
Test driven development is not dead. Write a test first. Watch it fail. Get it passing. Then refactor to make it performant and beautiful. If the test fails more than twice, pause and ask is this test testing important functionality? If not remove the test. Next ask, is this testing difficulty an indication of a code smell? If so, resolve the smell and write a better test.

2. Keep it short
Classes should be single responsibility. They should expose only one or two public methods. Methods should be single responsibility and have testable interfaces.

3. Respect the Law of Demeter
Do not chain calls between objects in order to keep boundaries and responsibilities clear.

4. No meta programming or monkey patching
Never ever reach for meta programming or monkey patching. There is always a better way to solve the problem.

5. Favor service objects
Service objects lend themselves to encapsulation. They are easier to reason about and change than many other design patterns.

6. Keep logic out of views
There should be almost no logic in the view layer. Anything more complicated than the simplest condition should be delegated to the commands and helper methods.

7. Keep logic out of controllers
There should be almost no logic in the controllers. Anything more complicated than the simplest condition should be delegated to service objects, commands and models.

8. Prefer logs to comments and comments to nothing
Debug level logging is a great way to codify an explanation of our systems. When debugging, add info level logs freely. Comments are helpful documentation, but have the danger of growing stale.

9. Avoid primitive obsessions
Do not unnecessarily reach for object primitives like hashes and arrays. It's often a better design decision to use higher level objects. The benefits are validation, encapsulation, and code readability.

10. YAGNI
You aren't going to need it. Do not build things that we do not need right now. If we follow the rest of the commandments, it should be easy to add new features and systems when the real need comes up.

---
description: Project overview and context 
globs: *
---

GradeBot is an AI-powered assignment grading tool that automates feedback for student work in Google Docs. The app streamlines the grading process for educators by analyzing student submissions against assignment
prompts and grading rubrics.

Purpose

- Automates grading of student assignments stored in Google Drive
- Provides structured feedback with strengths and improvement opportunities
- Tracks grading progress in real-time
- Maintains organization of submissions and grades

Tech Stack

- Backend: Ruby on Rails 8 with SQLite database
- Frontend: Hotwire (Turbo/Stimulus), Tailwind CSS
- Authentication: Google OAuth2
- External Services:
  - Google Drive API for document access
  - Large Language Models (LLM) for grading
- Background Processing: Solid Queue
- Deployment: Docker/Kamal
- Monitoring: Custom admin dashboards for LLM costs and job status

Architecture Features

- Command pattern for business logic
- Service objects for core functionality
- Status management system for task state transitions
- Optimistic locking to prevent race conditions
- Event-based broadcasting for real-time updates
- Feature flag system for controlled rollout

---
description: Consistent test structure for better readability.
globs: test/**/*_test.rb
---
# Rails Test Format

Tests should follow this structure:
- Setup
- Exercise
- Verify
- Teardown (if needed)

Tests are to be used to drive development.

Tests should be considered documentation.

Use descriptive test names that explain the behavior being tested.
Favor simplicity over complexity in test cases.

When a test fails, we should first ask, does the failure point to a legitimate issue or is the test
not testing a valid case or feature we care about. If it is the latter, we should either update or remove the test.

Prefer lengthy tests that are easy to read than DRY tests.

Avoid excessive mocking and stubbing. Do not ever stub things like Time or Kernel.

We use minitest.

Example:
```ruby
require 'test_helper'

class UserTest < ActiveSupport::TestCase
  test "should be valid with valid attributes" do
    # Setup
    user = User.new(name: "Test User", email: "test@example.com")
    
    # Exercise & Verify
    assert user.valid?
  end
  
  test "should not be valid without email" do
    # Setup
    user = User.new(name: "Test User")
    
    # Exercise & Verify
    assert_not user.valid?
    assert_includes user.errors[:email], "can't be blank"
  end
end
```
---
description: Guidelines for implementing consistent Tailwind CSS patterns
globs: app/views/**/*.html.erb, app/components/**/*.html.erb, app/assets/stylesheets/**/*.css
---
# Tailwind CSS Usage

## General Principles:
- Use utility classes directly in markup instead of custom CSS when possible
- Extract repeated patterns to components rather than creating custom classes
- Use sensible defaults from the design system
- Organize classes in a consistent order
- Do not use inline styles and avoid custom CSS as much as possible

## Class Organization Order:
1. Layout (display, position)
2. Box model (width, height, padding, margin)
3. Typography (font, text)
4. Visual (colors, backgrounds, borders)
5. Interactivity (hover, focus)

## Responsive Design:
- Use mobile-first approach with responsive prefixes (sm:, md:, lg:, xl:)
- Avoid fixed heights when possible
- Test layouts across all breakpoints

## Examples:

### Good:
```erb
<div class="flex flex-col sm:flex-row items-center p-4 mb-6 bg-white rounded-lg shadow">
  <img class="w-16 h-16 rounded-full mr-4" src="<%= user.avatar_url %>" alt="">
  <div>
    <h3 class="text-lg font-medium text-gray-900"><%= user.name %></h3>
    <p class="text-gray-500"><%= user.role %></p>
  </div>
</div>
```
---
description: Guidelines for properly managing secrets and credentials with Kamal
globs: config/deploy.yml, config/credentials/**/*.yml.enc, .env.*, .kamal/*
---
# Kamal Secrets Management

When working with secrets and credentials:
- Never commit plain text secrets to the repository
- Use Kamal's built-in secrets management for all environment-specific values
- Store development secrets in .env.development.local (gitignored)
- Reference secrets in code using ENV variables
- Update the deploy.yaml whenever we add a new ENV variable

---
description: Guidelines for organizing routes.rb
globs: config/routes.rb
---
# Rails Routes Format

Routes should be organized as follows:
- Group routes by resource or feature
- Use RESTful routes when possible
- Add comments to clarify non-standard routes
- Minimize custom routes

Example:
```ruby
Rails.application.routes.draw do
  # Authentication
  devise_for :users
  
  # Public pages
  root to: 'home#index'
  get 'about', to: 'home#about'
  
  # Core resources
  resources :organizations do
    resources :members, only: [:index, :create, :destroy]
  end
  
  resources :posts do
    resources :comments, shallow: true
  end
  
  # Admin section
  namespace :admin do
    resources :users
    resources :settings, only: [:index, :update]
  end
end
```
---
description: Guidelines for keeping models clean and focused.
globs: app/models/**/*.rb
---
# Rails Model Format

Models should be organized as follows:
- Constants first
- Associations second
- Validations third
- Scopes fourth
- Class methods fifth
- Instance methods sixth
- Private methods last.

Prefer simple validations and scopes over complex ones.

Keep models encapsulated. Use service objects for any complicated business logic.

Example:
```ruby
class User < ApplicationRecord
  # Constants
  ROLES = %w[admin member guest].freeze
  
  # Associations
  belongs_to :organization
  has_many :posts
  
  # Validations
  validates :email, presence: true, uniqueness: true
  validates :name, presence: true
  
  # Scopes
  scope :active, -> { where(active: true) }
  
  # Class methods
  def self.find_by_email(email)
    find_by(email: email.downcase)
  end
  
  # Instance methods
  def full_name
    "#{first_name} #{last_name}"
  end
end
```

---
description: Ensures controllers follow a consistent structure with clear action definitions.
globs: app/controllers/**/*.rb
---
# Rails Controller Format

Controllers should follow this format:
- Actions grouped by REST verb (GET, POST, etc.)
- Clear separation between actions with a newline
- Private methods at the bottom
- Strong params defined using private method
- Use expect for strong params, not require
- Each action should do one thing well
- Do not put business logic in the controller - move it to service objects or models instead.
- Follow the law of delimiter
- Double check authorization and authentication

Example:
```ruby
class UsersController < ApplicationController
  def index
    @users = User.all
  end

  def show
    @user = User.find(params[:id])
  end

  private

  def user_params
    params.require(:user).permit(:name, :email)
  end
end
```