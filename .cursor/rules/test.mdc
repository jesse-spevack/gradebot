---
description: Consistent test structure for better readability.
globs: test/**/*_test.rb
---
# Rails Test Format

Tests should follow this structure:
- Setup
- Exercise
- Verify
- Teardown (if needed)

Tests are to be used to drive development.

Tests should be considered documentation.

Use descriptive test names that explain the behavior being tested.
Favor simplicity over complexity in test cases.

When a test fails, we should first ask, does the failure point to a legitimate issue or is the test
not testing a valid case or feature we care about. If it is the latter, we should either update or remove the test.

Prefer lengthy tests that are easy to read than DRY tests.

Avoid excessive mocking and stubbing. Do not ever stub things like Time or Kernel.

## Fixtures vs FactoryBot

We use Rails fixtures exclusively, NOT FactoryBot. Key principles:

- Always review existing fixtures in test/fixtures/*.yml before creating tests
- Use descriptive fixture references (e.g., `users(:admin)`, not `users(:one)`)
- Don't assume fixture data - verify what's defined in the fixture files first
- Create test data in the test itself when necessary, but prefer fixtures for common cases
- Avoid making up fixtures that don't exist in the YAML files
- Consider adding new fixtures for reusable test data rather than creating objects in multiple tests

Example of proper fixture usage:
```ruby
# Setup - referencing existing fixtures
@admin_user = users(:admin)
@article = articles(:published)

# Creating test-specific data when needed
@custom_comment = Comment.create(
  user: @admin_user,
  article: @article,
  body: "Test comment for this specific test"
)
```

We use minitest.

Example:
```ruby
require 'test_helper'

class UserTest < ActiveSupport::TestCase
  test "should be valid with valid attributes" do
    # Setup
    user = User.new(name: "Test User", email: "test@example.com")
    
    # Exercise & Verify
    assert user.valid?
  end
  
  test "should not be valid without email" do
    # Setup
    user = User.new(name: "Test User")
    
    # Exercise & Verify
    assert_not user.valid?
    assert_includes user.errors[:email], "can't be blank"
  end
end